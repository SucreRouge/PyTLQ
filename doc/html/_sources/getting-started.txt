Getting Started
===============

Input Language
--------------
The syntax of CTL queries recognized by PyTLQ is as follows:

::

    ctl_query ::= ?                               -- placeholder
                | True                            -- true constant
                | False                           -- false constant
                | 'atom'                          -- atomic proposition
                | ( ctl_query )                   -- parentheses
                | ~ ctl_query                     -- logical not
                | ctl_query & ctl_query           -- logical and
                | ctl_query | ctl_query           -- logical or
                | ctl_query -> ctl_query          -- logical implies
                | ctl_query <-> ctl_query         -- logical equivalence
                | EX ctl_query                    -- exists next state
                | EG ctl_query                    -- exists globally
                | EF ctl_query                    -- exists eventually
                | E [ ctl_query U ctl_query ]     -- exists until
                | E [ ctl_query oU ctl_query ]    -- exists overlapping until
                | E [ ctl_query dU ctl_query ]    -- exists disjoint until
                | E [ ctl_query W ctl_query ]     -- exists weak until
                | E [ ctl_query oW ctl_query ]    -- exists overlapping weak until
                | E [ ctl_query dW ctl_query ]    -- exists disjoint weak until
                | AX ctl_query                    -- forall next state
                | AG ctl_query                    -- forall globally
                | AF ctl_query                    -- forall eventually
                | A [ ctl_query U ctl_query ]     -- forall until
                | A [ ctl_query oU ctl_query ]    -- forall overlapping until
                | A [ ctl_query dU ctl_query ]    -- forall disjoint until
                | A [ ctl_query W ctl_query ]     -- forall weak until
                | A [ ctl_query oW ctl_query ]    -- forall overlapping weak until
                | A [ ctl_query dW ctl_query ]    -- forall disjoint weak until

Note that the fragment CTLQx does not allow all these operators [3].


Installation
------------

*Remark. Make sure you are using Python 3 before installing PyTLQ.*

::

    $ pip install https://github.com/sthibert/PyTLQ/zipball/master

Note that PyParsing and Click are **automatically** installed with PyTLQ, but
PyNuSMV must be **manually** installed before using PyTLQ.


Usage
-----

PyTLQ is meant to be called from the command line. The usage is:

::

    $ pytlq <model_path> <query> [--order <order_path>]

- ``<model_path>`` represents the path to the SMV model you want to analyse.
- ``<query>`` represents your CTL query as a string that follows the input
  language defined in `Input Language`_.
- ``<order_path>`` is an optional argument that allows you to provide an order
  file (.ord) to PyTLQ, in order to compute the considered SMV model
  efficiently.

This command computes the unique set of solution states that represents an
exact solution to ``query`` in the system defined in ``model_path`` (if there
is one). Then, you have the choice of projecting the solution on a subset of
the variables of the system, simplifying the solution thanks to an approximate
conjunctive decomposition, or you can quit PyTLQ.

To display the usage instructions, just enter:

::

    $ pytlq --help


Example
-------

Consider the SMV model of Clarke, Grumberg and Peled's microwave oven example
[5], found in ``examples/microwave.smv``.

The microwave oven functioning is informally specified as follows:

|  "To cook food in the oven, open the door, put the food inside, and close the
|  door. Do not put metal containers in the oven. Press the start button. The
|  oven will warmup for 30 seconds, and then it will start cooking. When the
|  cooking is done, the oven will stop. The oven will stop also whenever the
|  door is opened during cooking. If the oven is started while the door is
|  open, an error will occur, and the oven will not heat. In such a case, the
|  reset button may be used."
|  (Source: https://users.dimi.uniud.it/~angelo.montanari/MCclasses.pdf)
|

Now, imagine we want to discover what makes the oven eventually heat without
using a trial-and-error approach. To do that, we can express the following CTL
query: ``"AG (? -> AF 'heat')"``, which asks "What can guarantee that the oven
will heat?" We then launch PyTLQ with the path of the microwave oven SMV model
and this CTL query as inputs:

::

    $ pytlq examples/microwave.smv "AG (? -> AF 'heat')"

This command will output the unique set of solution states that represents an
exact solution to ``"AG (? -> AF 'heat')"`` in the microwave oven model:

::

    Solution states:
    {{'close': 'TRUE', 'error': 'FALSE', 'heat': 'TRUE', 'start': 'FALSE'},
     {'close': 'TRUE', 'error': 'FALSE', 'heat': 'FALSE', 'start': 'TRUE'},
     {'close': 'TRUE', 'error': 'FALSE', 'heat': 'TRUE', 'start': 'TRUE'}}

    What do you want to do?
      1. Project the solution on a subset of the variables
      2. Simplify the solution according to Chan's approximate conjunctive decomposition
      3. Quit PyTLQ
    Your choice [3]:

Suppose now that we want to simplify the solution. In this case, we just type
"2". Two questions will appear in the terminal to gather the additional
information needed by the simplification algorithm:

::

    Please enter the maximum number of variables that must appear in the conjuncts of the simplification [1]:
    Please enter the list of variables of interest, separated by commas [all the variables]:

Here, we enter "2" for the first question and just hit the return key for the
second (that is, we consider all the variables of the model). We then obtain
the following approximate conjunctive decomposition:

::

    Approximate conjunctive decomposition:
    (error = FALSE)
    & (close = TRUE)
    & ((heat = FALSE & start = TRUE) | (heat = TRUE & start = TRUE) | (heat = TRUE & start = FALSE))

    What do you want to do?
      1. Project the solution on a subset of the variables
      2. Simplify the solution according to Chan's approximate conjunctive decomposition
      3. Quit PyTLQ
    Your choice [3]:

This output means that, to ensure that the oven will eventually heat, the door
must be closed, there must be no error, and either the start button is pushed
or the oven already heats.

In conclusion, with only one temporal logic query, we just discovered the
following invariant in the microwave oven model:
``AG ((close & !error & (start | heat)) -> AF heat)``.

Finally, if you want to quit PyTLQ, type "3" or simply hit the return key.
